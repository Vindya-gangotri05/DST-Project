# -*- coding: utf-8 -*-
"""BRAIN CANCER DETECTION

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XqLvlQOv0QF9zTS4fwAp0UcegmLK4x8F
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve

df = pd.read_csv("/content/sample_data/DST/BrainCancer.csv")

df.drop('Unnamed: 0', axis=1, inplace=True)

print("Missing values:\n", df.isnull().sum())

df['diagnosis'].fillna(df['diagnosis'].mode()[0], inplace=True)

for col in ['sex', 'diagnosis', 'loc', 'stereo']:
    df[col] = LabelEncoder().fit_transform(df[col])

df.head()

X = df.drop('status', axis=1)
y = df['status']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

sns.countplot(x=y)
plt.title("Target Distribution (Status)")
plt.show()

plt.figure(figsize=(8,6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.show()

log_model = LogisticRegression(max_iter=1000)
log_model.fit(X_train, y_train)

y_pred_log = log_model.predict(X_test)
y_prob_log = log_model.predict_proba(X_test)[:,1]

print("Logistic Regression Report:")
print(classification_report(y_test, y_pred_log))

print("Logistic Regression ROC-AUC:", roc_auc_score(y_test, y_prob_log))

fpr, tpr, _ = roc_curve(y_test, y_prob_log)
plt.plot(fpr, tpr, label='Logistic Regression')
plt.plot([0,1],[0,1],'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.show()

tree = DecisionTreeClassifier(max_depth=4, random_state=42)
tree.fit(X_train, y_train)

y_pred_tree = tree.predict(X_test)
y_prob_tree = tree.predict_proba(X_test)[:,1]

print("Decision Tree Report:")
print(classification_report(y_test, y_pred_tree))
print("Decision Tree ROC-AUC:", roc_auc_score(y_test, y_prob_tree))

plt.figure(figsize=(12,6))
plot_tree(tree, feature_names=X.columns, class_names=['No Disease','Disease'], filled=True)
plt.show()

importance = pd.Series(tree.feature_importances_, index=X.columns)
importance.sort_values(ascending=False).plot(kind='bar')
plt.title('Feature Importance (Decision Tree)')
plt.show()

params = {'max_depth':[2,3,4,5], 'min_samples_split':[2,4,6,8]}
grid = GridSearchCV(DecisionTreeClassifier(random_state=42), params, scoring='f1', cv=3)
grid.fit(X_train, y_train)
print("Best Parameters for Decision Tree:", grid.best_params_)